{
    "env": {
        "browser": true,
        "node": true,
        "es6": true,
        "jasmine": true,
    },

    "parser": "babel-eslint",

    "plugins": [
        "react",
        "import",
        "jsx-a11y",
    ],

    "ecmaFeatures": {
        "arrowFunctions": true,
        "binaryLiterals": true,
        "blockBindings": true,
        "classes": true,
        "defaultParams": true,
        "destructuring": true,
        "forOf": true,
        "generators": true,
        "modules": true,
        "objectLiteralComputedProperties": true,
        "objectLiteralDuplicateProperties": true,
        "objectLiteralShorthandMethods": true,
        "objectLiteralShorthandProperties": true,
        "octalLiterals": true,
        "regexUFlag": true,
        "regexYFlag": true,
        "spread": true,
        "superInFunctions": true,
        "templateStrings": true,
        "unicodeCodePointEscapes": true,
        "globalReturn": true,
        "jsx": true,
    },

    "rules": {
        "comma-dangle": [
            "error", {
                "arrays": "always-multiline",
                "objects": "always-multiline",
                "imports": "never",
                "exports": "never",
                "functions": "ignore",
            }
        ],
        "no-cond-assign": 2,
        "no-console": 2,
        "no-constant-condition": 2,
        "no-control-regex": 2,
        "no-debugger": 2,
        "no-dupe-args": 2,
        "no-dupe-keys": 2,
        "no-duplicate-case": 2,
        "no-empty-character-class": 2,
        "no-empty": 2,
        "no-ex-assign": 2,
        "no-extra-boolean-cast": 2,
        "no-extra-parens": 0,
        "no-extra-semi": 2,
        "no-func-assign": 2,
        "no-inner-declarations": 2,
        "no-invalid-regexp": 2,
        "no-irregular-whitespace": 2,
        "no-negated-in-lhs": 2,
        "no-obj-calls": 2,
        "no-regex-spaces": 2,
        "no-sparse-arrays": 2,
        "no-unreachable": 2,
        "use-isnan": 2,
        "valid-jsdoc": 0,
        "valid-typeof": 2,
        "no-unexpected-multiline": 2,

        "accessor-pairs": 0,
        "block-scoped-var": 2,
        "complexity": ["error", { "max": 7 }],
        "consistent-return": 2,
        "curly": 2,
        "default-case": 2,
        "dot-notation": 2,
        "dot-location": [2, "property"],
        "eqeqeq": 2,
        "guard-for-in": 2,
        "no-alert": 2,
        "no-caller": 2,
        "no-div-regex": 2,
        "no-else-return": 2,
        "no-eq-null": 2,
        "no-eval": 2,
        "no-extend-native": 2,
        "no-extra-bind": 1,
        "no-fallthrough": 2,
        "no-floating-decimal": 2,
        "no-implicit-coercion": [2, {"boolean": false, "number": true, "string": true}],
        "no-implied-eval": 2,
        "no-invalid-this": 2,
        "no-iterator": 2,
        "no-labels": 2,
        "no-lone-blocks": 2,
        "no-loop-func": 2,
        "no-confusing-arrow": ["error", {"allowParens": true}],
        "no-multi-spaces": 2,
        "no-multi-str": 2,
        "no-native-reassign": 2,
        "no-new-func": 2,
        "no-new-wrappers": 2,
        "no-new": 2,
        "no-octal-escape": 2,
        "no-octal": 2,
        "no-param-reassign": 1,
        "no-process-env": 0,
        "no-proto": 2, // disallow usage of __proto__ property
        "no-redeclare": 2, // disallow declaring the same variable more than once
        "no-return-assign": 2, // disallow use of assignment in return statement
        "no-script-url": 2, // disallow use of javascript: urls.
        "no-self-compare": 2, // disallow comparisons where both sides are exactly the same
        "no-sequences": 2, // disallow use of the comma operator
        "no-throw-literal": 2, // restrict what can be thrown as an exception
        "no-unused-expressions": 2, // disallow usage of expressions in statement position
        "no-useless-call": 2, // disallow unnecessary .call() and .apply()
        "no-useless-concat": 2, // disallow unnecessary concatenation of literals or template literals
        "no-void": 2, // disallow use of the void operator
        "no-warning-comments": [0, {"terms": ["todo", "fixme"], "location": "start"}], // disallow usage of configurable warning terms in comments": 2, // e.g. TODO or FIXME
        "no-with": 2, // disallow use of the with statement
        "radix": 2, // require use of the second argument for parseInt()
        "vars-on-top": 2, // require declaration of all vars at the top of their containing scope
        "wrap-iife": 2, // require immediate function invocation to be wrapped in parentheses
        "yoda": 2, // require or disallow Yoda conditions


        //
        // Strict Mode
        //
        // These rules relate to using strict mode.
        //
        "strict": 0, // controls location of Use Strict Directives. 0: required by `babel-eslint`


        //
        // Variables
        //
        // These rules have to do with variable declarations.
        //
        "init-declarations": 2, // enforce or disallow variable initializations at definition
        "no-catch-shadow": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope
        "no-delete-var": 2, // disallow deletion of variables
        "no-label-var": 2, // disallow labels that share a name with a variable
        "no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
        "no-shadow": 2, // disallow declaration of variables already declared in the outer scope
        "no-undef-init": 2, // disallow use of undefined when initializing variables
        "no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undefined": 0, // disallow use of undefined variable - Disabled for Redux
        "no-unused-vars": ["error", { "ignoreRestSiblings": true }],
        "no-use-before-define": 0, // disallow use of variables before they are defined // TODO: Relaxed for backward compat
        "prefer-destructuring": ["error", {"array": true, "object": true}, {
              "enforceForRenamedProperties": false}],


        //
        // Node.js and CommonJS
        //
        // These rules are specific to JavaScript running on Node.js or using CommonJS in the browser.
        //
        "callback-return": 2, // enforce return after a callback
        "global-require": 0, // disallow require() outside of the top-level module scope
        "handle-callback-err": 2, // enforce error handling in callbacks
        "no-mixed-requires": 2, // disallow mixing regular variable and require declarations
        "no-new-require": 2, // disallow use of new operator with the require function
        "no-path-concat": 2, // disallow string concatenation with __dirname and __filename
        "no-process-exit": 0, // disallow process.exit()
        "no-restricted-modules": 2, // restrict usage of specified node modules
        "no-sync": 0, // disallow use of synchronous methods


        //
        // Stylistic Issues
        //
        // These rules are purely matters of style and are quite subjective.
        //
        "array-bracket-spacing": [2, "never"], // enforce spacing inside array brackets
        "block-spacing": [2, "always"], // disallow or enforce spaces inside of single line blocks
        "brace-style": 2, // enforce one true brace style
        "camelcase": 0, // require camel case names // Disabled for constants
        "comma-spacing": [2, {"before": false, "after": true}], // enforce spacing before and after comma
        "comma-style": [2, "last"], // enforce one true comma style
        "computed-property-spacing": [2, "never"], //require or disallow padding inside computed properties
        "consistent-this": [2, "_this"], // enforce consistent naming when capturing the current execution context
        "eol-last": 2, // enforce newline at the end of file, with no multiple empty lines
        "func-names": 0, // require function expressions to have a name
        "func-style": ["error", "declaration", {"allowArrowFunctions": true}], // enforce use of function declarations or expressions
        "id-length": 0, // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
        "id-match": 0, // require identifiers to match the provided regular expression
        "indent": [2, 4, {"SwitchCase": 1}], // specify tab or space width for your code (fixable)
        "jsx-quotes": [2, "prefer-double"], // specify whether double or single quotes should be used in JSX attributes
        "key-spacing": [2, {"beforeColon": false, "afterColon": true}], // enforce spacing between keys and values in object literal properties
        "lines-around-comment": 0,
        "line-comment-position": ["error", { "position": "above" }],
        "newline-per-chained-call": ["error", { "ignoreChainWithDepth": 2 }],
        "linebreak-style": [0, "unix"], //disallow mixed 'LF' and 'CRLF' as linebreaks
        "max-nested-callbacks": [1, 3], // specify the maximum depth callbacks can be nested
        "new-cap": [2, {"newIsCap": true, "capIsNew": false}], // require a capital letter for constructors
        "new-parens": 2, // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-after-var": ["error", "always"], // require or disallow an empty newline after variable declarations
        "no-array-constructor": 2, // disallow use of the Array constructor
        "no-continue": 2, //disallow use of the continue statement
        "no-inline-comments": 2, // disallow comments inline after code
        "no-lonely-if": 2, // disallow if as the only statement in an else block
        "no-mixed-spaces-and-tabs": 1, // disallow mixed spaces and tabs for indentation
        "no-multiple-empty-lines": [2, {"max": 2}], // disallow multiple empty lines
        "no-nested-ternary": 2, // disallow nested ternary expressions
        "no-new-object": 2, // disallow the use of the Object constructor
        "no-restricted-syntax": [2, "WithStatement"], // disallow use of certain syntax in code
        "no-spaced-func": 2, // disallow space between function identifier and application
        "no-ternary": 0, // disallow the use of ternary operators
        "no-trailing-spaces": 2, // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 2, // disallow dangling underscores in identifiers
        "no-unneeded-ternary": 2, // disallow the use of ternary operators when a simpler alternative exists
        "object-curly-spacing": [2, "never"], // require or disallow padding inside curly braces
        "one-var": [2, "never"], // require or disallow one variable declaration per function
        "operator-assignment": [0, "never"], // require assignment operator shorthand where possible or prohibit it entirely
        "operator-linebreak": [2, "after"], // enforce operators to be placed before or after line breaks
        "padded-blocks": 0, // enforce padding within blocks
        "quote-props": [1, "as-needed"], // require quotes around object literal property names
        "quotes": [1, "single"], // specify whether backticks, double or single quotes should be used (fixable)
        "require-jsdoc": 0, // Require JSDoc comment
        "semi-spacing": [2, {"before": false, "after": true}], // enforce spacing before and after semicolons
        "semi": [2, "always"], // require or disallow use of semicolons instead of ASI
        "sort-vars": 0, // sort variables within the same declaration block
        "sort-keys": ["error", "asc", {"caseSensitive": false}],
        "space-before-blocks": [2, "always"], // require or disallow a space before blocks
        "space-before-function-paren": [2, {"anonymous": "always", "named": "never"}], // require or disallow a space before function opening parenthesis
        "space-in-parens": [2, "never"], // require or disallow spaces inside parentheses
        "space-infix-ops": 2, // require spaces around operators
        "space-unary-ops": [2, {"words": true, "nonwords": false}], // require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "spaced-comment": [2, "always"], // require or disallow a space immediately following the // or /* in a comment
        "wrap-regex": 2, // require regex literals to be wrapped in parentheses,


        //
        // ECMAScript 6
        //
        // These rules are only relevant to ES6 environments and are off by default.
        //
        "arrow-parens": [2, "as-needed"], // require parens in arrow function arguments
        "arrow-spacing": 2, // require space before/after arrow function's arrow
        "constructor-super": 2, // verify calls of super() in constructors
        "generator-star-spacing": [2, "before"], // enforce the spacing around the * in generator functions
        "no-class-assign": 2, // disallow modifying variables of class declarations
        "no-const-assign": 2, // disallow modifying variables that are declared using const
        "no-dupe-class-members": 2, // disallow duplicate name in class members
        "no-this-before-super": 2, // disallow use of this/super before calling super() in constructors.
        "no-var": 2, // require let or const instead of var
        "object-shorthand": 2, // require method and property shorthand syntax for object literals
        "prefer-arrow-callback": 0, // suggest using arrow functions as callbacks
        "prefer-const": 2, // suggest using of const declaration for variables that are never modified after declared
        "prefer-spread": 2, // suggest using the spread operator instead of .apply().
        "prefer-rest-params": 2,
        "prefer-reflect": 0, // suggest using Reflect methods where applicable
        "prefer-template": 0, // suggest using template literals instead of strings concatenation
        "require-yield": 2, // disallow generator functions that do not have yield
        "sort-imports": ["error", {
        "ignoreCase": false,
        "ignoreMemberSort": false,
        "memberSyntaxSortOrder": ["none", "all", "multiple", "single"]
        }],


        //
        // Legacy
        //
        // The following rules are included for compatibility with JSHint and JSLint.
        // While the names of the rules may not match up with the JSHint/JSLint counterpart,
        // the functionality is the same.
        //
        "max-depth": [2, 3], // specify the maximum depth that blocks can be nested (off by default)
        "max-len": [2, 120, 2], // specify the maximum length of a line in your program (off by default)
        "max-params": [2, 3], // limits the number of parameters that can be used in the function declaration. (off by default)
        "max-statements": [2, 20], // specify the maximum number of statement allowed in a function (off by default)
        "no-bitwise": 0, // disallow use of bitwise operators (off by default)
        "no-plusplus": 2, // disallow use of unary operators, ++ and -- (off by default)

        //
        // eslint-plugin-react
        //
        // React specific linting rules for ESLint
        //
        "react/jsx-closing-bracket-location": 2,
        "react/display-name": 0, // Prevent missing displayName in a React component definition
        "react/jsx-boolean-value": [2, "always"], // Enforce boolean attributes notation in JSX
        "react/jsx-no-undef": 2, // Disallow undeclared variables in JSX
        "react/jsx-sort-prop-types": 0, // Enforce propTypes declarations alphabetical sorting
        "react/jsx-sort-props": 2, // Enforce props alphabetical sorting
        "react/jsx-uses-react": 2, // Prevent React to be incorrectly marked as unused
        "react/jsx-uses-vars": 2, // Prevent variables used in JSX to be incorrectly marked as unused
        "react/jsx-tag-spacing": [2, {
             "closingSlash": "never",
             "beforeSelfClosing": "always",
             "afterOpening": "never"
         }], // Enfore space before closing tag
        "react/no-did-mount-set-state": 2, // Prevent usage of setState in componentDidMount
        "react/no-did-update-set-state": 2, // Prevent usage of setState in componentDidUpdate
        "react/no-direct-mutation-state": 2,
        "react/no-multi-comp": 2, // Prevent multiple component definition per file
        "react/no-unknown-property": 2, // Prevent usage of unknown DOM property
        "react/no-unescaped-entities": 2,
        "react/prop-types": [2, {"ignore": ["children", "dispatch", "onFormChange"]}], // Prevent missing props validation in a React component definition
        "react/react-in-jsx-scope": 2, // Prevent missing React when using JSX
        "react/require-extension": 0, // Restrict file extensions that may be required
        "react/self-closing-comp": 2, // Prevent extra closing tags for components without children
        "react/jsx-wrap-multilines": 2, // Prevent missing parentheses around multilines JSX
        "react/sort-comp": 2, // Enforce component methods order (sort-comp)
        "react/no-string-refs": 2, // Enforce no depricated way of using refs
        "react/no-danger": 2, // prevent dangerouslySetInnerHTML
        "react/no-deprecated": 2, // prevent deprecated methods
        "react/no-is-mounted": 2,
        "react/prefer-es6-class": 2, // yep
        "react/prefer-stateless-function": [2, { "ignorePureComponents": false }],
        "react/jsx-indent-props": [2, 4],
        "react/jsx-no-bind": ["error", {"allowArrowFunctions": true}],
        "react/jsx-curly-spacing": [2, "never"],
        "react/jsx-pascal-case": 2,

        // eslint-plugin-import

        "import/no-unresolved": 0, // switch this on when moving files around or refactoring, keep off for build as it can not pass
        "import/named": 2,
        "import/no-mutable-exports": 2,

        // eslint a11y

        "jsx-a11y/mouse-events-have-key-events": 2
    }
}
